// Autogenerated with StateSmith 0.18.0+34a94a5de0bf3f5f53012c58cebeef3eea5dac04. Last run: 2025-10-22 01:47:13 PM.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// DO NOT EDIT THIS FILE: Automatically generated by StateSmith

#ifndef SMSODASTREAMPURE_H
#define SMSODASTREAMPURE_H
#include <stdint.h>
#include <stdint.h> // for count var
#include "SMinterface.h"


typedef enum SMSodaStreamPure_EventId
{
    SMSodaStreamPure_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    SMSodaStreamPure_EventId_EVENT_ANYKEYPRESS = 1,
    SMSodaStreamPure_EventId_EVENT_BOTTLEFULLSENSOR = 2,
    SMSodaStreamPure_EventId_EVENT_CARBLEVELSHORTPRESSED = 3,
    SMSodaStreamPure_EventId_EVENT_ENTER_GUI_CONTROLLED_MODE = 4,
    SMSodaStreamPure_EventId_EVENT_EXIT_GUI_CONTROLLED_MODE = 5,
    SMSodaStreamPure_EventId_EVENT_FILTERBUTTONLONGPRESSED = 6,
    SMSodaStreamPure_EventId_EVENT_FILTERBUTTONSHORTPRESSED = 7,
    SMSodaStreamPure_EventId_EVENT_HWWATCHDOG = 8,
    SMSodaStreamPure_EventId_EVENT_PRIMARYBUTTONPRESSED = 9,
    SMSodaStreamPure_EventId_EVENT_SAFETYFAIL = 10
} SMSodaStreamPure_EventId;

enum
{
    SMSodaStreamPure_EventIdCount = 11
};

typedef enum SMSodaStreamPure_StateId
{
    SMSodaStreamPure_StateId_ROOT = 0,
    SMSodaStreamPure_StateId_SATE_HWWATCHDOG = 1,
    SMSodaStreamPure_StateId_SATE_SAFETYFAIL = 2,
    SMSodaStreamPure_StateId_SATE_TILTED = 3,
    SMSodaStreamPure_StateId_STAT_GUICONTROLMODE = 4,
    SMSodaStreamPure_StateId_STATE_GUIMODEWAITCOMMANDS = 5,
    SMSodaStreamPure_StateId_STATE_STOPWATERPUMP = 6,
    SMSodaStreamPure_StateId_STATE_AUTOMATICMODE = 7,
    SMSodaStreamPure_StateId_SATE_EXIT_CARBONATING = 8,
    SMSodaStreamPure_StateId_STATE_CARBONATING = 9,
    SMSodaStreamPure_StateId_SATE_CARBONATING_OFF = 10,
    SMSodaStreamPure_StateId_SATE_CARBONATING_ON = 11,
    SMSodaStreamPure_StateId_SATE_START_CARBONATING = 12,
    SMSodaStreamPure_StateId_STATE_EXITFILTERINGONLY = 13,
    SMSodaStreamPure_StateId_STATE_FILTERING = 14,
    SMSodaStreamPure_StateId_STATE_MAKEDRINKDONE = 15,
    SMSodaStreamPure_StateId_STATE_POWERONSTANDBYREADY = 16,
    SMSodaStreamPure_StateId_STATE_AWAKE = 17,
    SMSodaStreamPure_StateId_STATE_READY = 18,
    SMSodaStreamPure_StateId_STATE_READYRINSEREQUIRED = 19,
    SMSodaStreamPure_StateId_STATE_SPLASH = 20,
    SMSodaStreamPure_StateId_STATE_POWERONINIT = 21,
    SMSodaStreamPure_StateId_STATE_SETLEVEL = 22,
    SMSodaStreamPure_StateId_STATE_SLEEPING = 23,
    SMSodaStreamPure_StateId_STATE_RINSING = 24
} SMSodaStreamPure_StateId;

enum
{
    SMSodaStreamPure_StateIdCount = 25
};


// Generated state machine
// forward declaration
typedef struct SMSodaStreamPure SMSodaStreamPure;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct SMSodaStreamPure_Vars
{
    uint16_t count; // this var can be referenced in diagram
    bool pumpStopsOnSensor;
    uint16_t carbCycle;
} SMSodaStreamPure_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void SMSodaStreamPure_ctor(SMSodaStreamPure* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void SMSodaStreamPure_start(SMSodaStreamPure* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void SMSodaStreamPure_dispatch_event(SMSodaStreamPure* sm, SMSodaStreamPure_EventId event_id);

// Generated state machine
struct SMSodaStreamPure
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    SMSodaStreamPure_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    SMSodaStreamPure_Vars vars;
};

#endif // SMSODASTREAMPURE_H
